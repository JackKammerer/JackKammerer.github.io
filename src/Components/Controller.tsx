/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/controller/scene.gltf -t -r public 
Author: cosmicollie (https://sketchfab.com/cosmicollie)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/controller-5ba4ef24d6554dc9b34417f41b7b0191
Title: Controller
*/

'use client';

import * as THREE from 'three'
import React, { use, useEffect, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber';

interface ControllerProps {
  position: [number, number, number];
  rotation: [number, number, number];
  order: number;
}

type GLTFResult = GLTF & {
  nodes: {
    Object_2: THREE.Mesh
    Object_3: THREE.Mesh
    Object_4: THREE.Mesh
    Object_5: THREE.Mesh
    Object_6: THREE.Mesh
    Object_7: THREE.Mesh
    Object_8: THREE.Mesh
    Object_9: THREE.Mesh
    Object_10: THREE.Mesh
  }
  materials: {
    Default_OBJ: THREE.MeshStandardMaterial
  }
}

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>

export default function Controller({ position, rotation, order }: ControllerProps) {

  const [delay, setDelay] = useState<number>(0);
  const [xPos, setXPos] = useState<number>(0);
  const [yPos, setYPos] = useState<number>(0);
  const [zPos, setZPos] = useState<number>(2);
  const [stage, setStage] = useState<number>(0);

  const ref = useRef<any>(null);

  useEffect(() => {
    if (order === 2) {
      setDelay(90);
      setXPos(2);
    } else {
      setXPos(-2);
    }
  })

  useFrame(() => {
    if (ref.current != null) {
      if (delay > 0) {
        setDelay(delay - 1);
        return;
      }
  
      if (stage === 0) {
        if (yPos < 6) {
          setYPos(yPos => yPos + 0.03);
          setZPos(zPos => zPos + 0.01);
          if (order === 2) {
            setXPos(xPos => xPos + 0.01);
          } else {
            setXPos(xPos => xPos - 0.01);
          }
        } else {
          setStage(1);
        }
      } else if (stage === 1) {
        if (yPos > 0.5) {
          setYPos(yPos => yPos - 0.03);
        } else {
          setStage(2);
        } 
      } else if (stage === 2) {
        if (zPos > 2) {
          setZPos(zPos => zPos - 0.01);
          if (order === 2) {
            setXPos(xPos => xPos - 0.01);
          } else {
            setXPos(xPos => xPos + 0.01);
          }
          setYPos(yPos => yPos - 0.0025);
        } else {
          if (order === 2) {
            setXPos(2);
          } else {
            setXPos(-2);
          }
          setYPos(0);
          setZPos(2);
          setStage(0);
        }
      }

      ref.current.position.set(xPos, yPos, zPos);
    }
  });


  const { nodes, materials } = useGLTF('/models/controller/scene.gltf') as GLTFResult
  return (
    <group ref={ref} position={position} rotation={rotation} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.72}>
        <mesh geometry={nodes.Object_2.geometry} material={materials.Default_OBJ} />
        <mesh geometry={nodes.Object_3.geometry} material={materials.Default_OBJ} />
        <mesh geometry={nodes.Object_4.geometry} material={materials.Default_OBJ} />
        <mesh geometry={nodes.Object_5.geometry} material={materials.Default_OBJ} />
        <mesh geometry={nodes.Object_6.geometry} material={materials.Default_OBJ} />
        <mesh geometry={nodes.Object_7.geometry} material={materials.Default_OBJ} />
        <mesh geometry={nodes.Object_8.geometry} material={materials.Default_OBJ} />
        <mesh geometry={nodes.Object_9.geometry} material={materials.Default_OBJ} />
        <mesh geometry={nodes.Object_10.geometry} material={materials.Default_OBJ} />
      </group>
    </group>
  )
}

useGLTF.preload('/models/controller/scene.gltf')